#!/bin/bash

#$ -N ASpineFseq
#$ -P jknight.prjc -q long.qc
#$ -e stderr_L.log -j y
#$ -cwd -V


echo "START : `date`"

# Pre-installed tools

ZCAT="/bin/zcat"
FASTQC="/well/jknight/software/rescomp/bin/fastqc"
CUTADAPT="/apps/well/python/2.7.8/bin/cutadapt"
BWA="/apps/well/bwa/0.7.10/bwa"
BWA_INDEX="/well/jknight/reference/mapping/bwa_g/Gencode19.GRCh37.genome.PGF.decoy.ERCC"
SAMTOOLS="/apps/well/samtools/1.2/bin/samtools"
PICARD="/apps/well/picard-tools/1.111/picard-Xmx3g"
BEDTOOLS="/apps/well/bedtools/2.24.0-18-gb0bc5b7/bin/bedtools"
BEDGRAPH_TO_BIGWIG="/well/jknight/software/rescomp/bin/bedGraphToBigWig"
GENOME_COVERAGE_BED="/apps/well/bedtools/2.24.0-18-gb0bc5b7/bin/genomeCoverageBed"
CHROM_SIZE="/well/jknight/reference/hs37_cox.chrom.sizes"
FSEQ="/well/jknight/software/rescomp/bin/fseq/bin/fseq"
BAMTOOLS="/apps/well/bamtools/2.3.0/bin/bamtools"
ATAC_QC="/well/jknight/Scripts/ATACseq_qc.R"
DIST_BETWEEN_PEAKS="/well/jknight/Scripts/distance_between_regions.pl"
EXTRACT_FRAGMENTS="/well/jknight/Scripts/bed_extract_fragments.pl"
BLACKLIST="/well/jknight/ATACseq/ATACseq_001/Analysis/Peak_calling/blacklist_filtering/wgEncodeDacMapabilityConsensusExcludable.bed"

module load R/3.2.2
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/apps/well/bamtools/2.3.0/lib/bamtools/

function help {
echo "
    ===========================================================
    =                                                         =
    =                  Welcome to pinechrom!                  =
    =                                                         =
    ===========================================================

This module of pinechrom, pinechrom_general, will run per-sample analysis on
your ATAC-Seq samples. Starting from fastq or bam files, it will perform
quality of mapped reads, statistical assesement of the quality of the sample,
peak calling and statistical assesement of called peaks.

pinechrom_general is flexible and can run different set of analysis steps
depending on your input. You can run it in three modes:

    pinechrom_general --prefix --fastq /path/to/fq/read1.fastq.gz,/path/to/fq/read2.fastq.gz

In case you want to start your analysis from raw fastq files, perform quality
checks of fastq files, run the alignment, filter good-quality reads and call
peaks, you should use this command. "--prefix" will be the name of the folder
that pinechrom_general will create and run all the analysis in, as well as the
prefix of all output file names. Please make sure that your fastq files:
  - are gzipped;
  - are separated by comma without spaces ("file1,file2" NOT "file1, file2");
  - you specify the *full* path to your fastq files, even if they are located
    in the same directory as the executable of pinechrom.

    pinechrom_general --prefix --bam /path/to/bam/sample.bam

In case you already generated bam files with mapped reads and want to proceed
with filtering reads based on their quality, calling peaks and performing
statistical analysis, you should use this command. You should specify the full
path to your bam file using "--bam".
    pinechrom_general --prefix --bam_filt /path/to/bam/sample.filt.bam

In case you performed filtering mapped reads yourself and use pinechrom to
generate statistical reports, call peaks and assess the quality of the peaks,
you should use this command. The pipeline will start with creating a bigwig
file for your input filtered bam file, perform statistical analysis, call peaks
and perform statistical analysis on them. You should specify the full path to
your filtered bam file using "--bam_filt".
"
}


FILENAME="default"
INPUT_READ1="default"
INPUT_READ2="default"
BAM="default"
FILTERED_BAM="default"

# ======================================================================
# =                                                                    =
# =                 READING IN COMMAND LINE ARGUMENTS                  =
# =                                                                    =
# ======================================================================


# Checking if the user specified prefix for the output files
if [[ $1 == "--prefix" ]]; then
    if [ -z "$2" ]; then
        echo "No argument supplied after --prefix, please specify a prefix for the output files."
        exit
    else
        FILENAME="$2"
        echo "Output folder name and prefix of output files will be $FILENAME."
    fi
else
    help
    exit
fi

# Checking whether fastq file ora  bam file was/were specified
if [[ $3 == "--fastq" ]]; then
    if [ -z "$4" ]; then
        echo "No argument supplied after --fastq, please specify fastq file names separated by comma and no spaces (file1.fastq,file2.fastq)."
        exit
    else
        INPUT_READ1=`echo $4 | sed s/\,.*//g`
        INPUT_READ2=`echo $4 | sed s/.*\,//g`
        echo "Name of the first fastq file is $INPUT_READ1."
        echo "Name of the second fastq file is $INPUT_READ2."
    fi
elif [[ $3 == "--bam" ]]; then
    if [ -z "$4" ]; then
        echo "No argument supplied after --bam, please specify bam file name."
        exit
    else
        BAM=$4
        echo "Name of the unfiltered bam file is $BAM."
    fi
elif [[ $3 == "--bam_filt" ]]; then
    if [ -z "$4" ]; then
        echo "No argument supplied after --bam_filt, please specify filtered bam file name."
        exit
    else
        FILTERED_BAM=$4
        echo "Name of the filtered bam file is $FILTERED_BAM."
    fi
else
    help
    exit
fi

mkdir $FILENAME.pinechrom_general
FULL_PATH_PINECHROM_RES="`pwd`/$FILENAME.pinechrom_general"

if [ "$INPUT_READ1" != "default" ]; then
    READ1=`echo $FILENAME.read1`
    READ2=`echo $FILENAME.read2`
    $ZCAT $INPUT_READ1 > $FILENAME.pinechrom_general/$READ1.fastq
    $ZCAT $INPUT_READ2 > $FILENAME.pinechrom_general/$READ2.fastq

    cd $FILENAME.pinechrom_general

    mkdir $READ1.fastqc_output
    mkdir $READ2.fastqc_output

    echo -n "`date`: running FASTQC on raw fastq files... "
    $FASTQC \
        $READ1.fastq \
        -f fastq \
        -o $READ1.fastqc_output 2> $FILENAME.fastqc_stderr.txt

    $FASTQC \
        $READ2.fastq \
        -f fastq \
        -o $READ2.fastqc_output 2> $FILENAME.fastqc_stderr.txt
    echo "done."

    # Adapter trimming, removing low quality bases
    echo -n "`date`: removing adapters... "
    $CUTADAPT \
        -a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC \
        -A CTGTCTCTTATACACATCTGACGCTGCCGACGA \
        --overlap 10 \
        --minimum-length=20 \
        -o $READ1.trimmed.fastq \
        -p $READ2.trimmed.fastq \
        $READ1.fastq $READ2.fastq 2> $FILENAME.cutadapt_stderr.txt
    echo "done."

    # Quality control on processed (cleaned) data
    mkdir $READ1.trimmed.fastqc_output
    mkdir $READ2.trimmed.fastqc_output

    echo -n "`date`: running FASTQC on trimmed files... "
    $FASTQC \
        $READ1.trimmed.fastq \
        -f fastq \
        -o $READ1.trimmed.fastqc_output 2> $FILENAME.fastqc_stderr.txt

    $FASTQC \
        $READ2.trimmed.fastq \
        -f fastq \
        -o $READ2.trimmed.fastqc_output 2> $FILENAME.fastqc_stderr.txt
    echo "done."

    # Aligning processed data
    echo -n "`date`: running the alignment... "
    $BWA mem \
        -t 3 \
        $BWA_INDEX \
        $READ1.trimmed.fastq \
        $READ2.trimmed.fastq > \
        $FILENAME.sam \
        2> $FILENAME.bwa_stderr.txt
    echo "done."

    # Converting sam to bam
    echo -n "`date`: converting sam to bam... "
    $SAMTOOLS view \
        -bSh $FILENAME.sam > \
        $FILENAME.bam1 \
        2> $FILENAME.samtools_stderr.txt
    echo "done."
    echo "filename of bam is $FILENAME.bam. we just created it using bwa."
    BAM=$FILENAME.bam1
fi

cd $FULL_PATH_PINECHROM_RES

if [ "$BAM" != "default" ]; then
    $SAMTOOLS view -b $BAM > $FILENAME.bam

    echo -n "`date`: sorting alignments in order to remove duplicates... "
    $SAMTOOLS sort \
        $FILENAME.bam \
        $FILENAME.sorted \
        2> $FILENAME.samtools_stderr.txt
    echo "done."

    echo -n "`date`: filtering step 1 -- removing duplicates using SAMTOOLS 0.1.19... "
    /apps/well/samtools/0.1.19/bin/samtools rmdup \
        $FILENAME.sorted.bam \
        $FILENAME.nodup.bam \
        2> $FILENAME.samtools_stderr.txt
    echo "done."

    echo -n "`date`: filtering step 2 -- selecting reads with high mapping quality > 30..."
    $BAMTOOLS filter \
        -mapQuality ">30" \
        -in $FILENAME.nodup.bam \
        -out $FILENAME.nodup.MAPQ30.bam \
        2> $FILENAME.bamtools_stderr.txt
    echo "done."

    echo -n "`date`: filtering step 3 -- removing non-uniquely mapped reads..."
    $SAMTOOLS view \
        -h $FILENAME.nodup.MAPQ30.bam | \
        grep -v "XA" | \
        $SAMTOOLS view -bS - > \
        $FILENAME.nodup.MAPQ30.uniq.bam \
        2> $FILENAME.samtools_stderr.txt
    echo "done."

    echo -n "`date`: filtering step 4 -- removing not properly paired reads... "
    $SAMTOOLS view \
        -h \
        -b \
        -f 3 \
        -F 12 \
        $FILENAME.nodup.MAPQ30.uniq.bam > \
        $FILENAME.nodup.MAPQ30.uniq.proper_paired.bam \
        2> $FILENAME.samtools_stderr.txt
    echo "done."
    echo -n "`date`: Generating sam with reads mapped to conventional chromosomes... "
    $SAMTOOLS view \
        -H $FILENAME.nodup.MAPQ30.uniq.proper_paired.bam | \
        grep chr | \
        grep -v chrM > \
        $FILENAME.filtered.non_sorted.sam

    $SAMTOOLS view \
        $FILENAME.nodup.MAPQ30.uniq.proper_paired.bam | \
        awk '$3 ~ /chr/ {print $0}' | \
        grep -v 'chrM\|MT\|hs\|NC\|GL' >> \
        $FILENAME.filtered.non_sorted.sam

    $SAMTOOLS view \
        -bS $FILENAME.filtered.non_sorted.sam > \
        $FILENAME.filtered.non_sorted.bam

    $SAMTOOLS sort \
        $FILENAME.filtered.non_sorted.bam \
        $FILENAME.filtered \
        2> $FILENAME.samtools_stderr.txt
    rm $FILENAME.filtered.non_sorted.sam
    rm $FILENAME.filtered.non_sorted.bam
    echo "done."

    mv $FILENAME.bam $FILENAME.unfiltered.bam
    mv $FILENAME.filtered.bam $FILENAME.bam1

    FILTERED_BAM=$FILENAME.bam1
fi


cd $FULL_PATH_PINECHROM_RES

if [ "$FILTERED_BAM" != "default" ]; then
    $SAMTOOLS view -b $FILTERED_BAM > $FILENAME.bam
fi

# Working on filtered bam file
# Creating WIGGLE file
$SAMTOOLS view \
    -H $FILENAME.bam | \
    head -26 | \
    grep SN | \
    head -24 | \
    sed s/chr//g | \
    sed s/.*SN\://g | \
    sed s/LN\://g | \
    awk '{print "chr" $0}' > \
    $FILENAME.chrom_sizes.txt

echo -n "`date`: Generating bedgraph to create a bigwig file... "
$GENOME_COVERAGE_BED \
    -bg \
    -ibam $FILENAME.bam \
    -split \
    -g $FILENAME.chrom_sizes.txt > \
    $FILENAME.bedgraph \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: Sorting bedgraph to create a bigwig file... "
LC_COLLATE=C
sort -k1,1 -k2,2n $FILENAME.bedgraph | \
    sed s/chr//g | \
    awk '{print "chr" $0}' > \
    $FILENAME.sorted.bedgraph
echo "done."

echo -n "`date`: Generating bigwig from bedgraph... "
$BEDGRAPH_TO_BIGWIG \
    $FILENAME.sorted.bedgraph \
    $FILENAME.chrom_sizes.txt $FILENAME.bw \
    2> $FILENAME.stderr.txt
echo "done".

echo -n "`date`: sorting filtered bam file by name... "
$SAMTOOLS sort \
    -n \
    -T $FILENAME.temp.bam \
    $FILENAME.bam \
    -o $FILENAME.filtered.name_sort.bam \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: BEDPE Creating bedpe file... "
$BEDTOOLS bamtobed \
    -bedpe \
    -i $FILENAME.filtered.name_sort.bam | \
    sed s/chr//g | \
    awk '{print "chr" $0}' > \
    $FILENAME.filtered.bedpe.bed \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: Sorting bedpe file... "
rm -rf $FILENAME.sorted.bed
for i in `echo {1..22} X Y`
do
    cat $FILENAME.filtered.bedpe.bed | grep -P "^chr$i\t" > $FILENAME.temp.bed
    $BEDTOOLS sort -i $FILENAME.temp.bed >> $FILENAME.sorted.bed
    rm $FILENAME.temp.bed
done

cat $FILENAME.sorted.bed | \
    grep -v -i 'GL\|NC\|hs' | \
    awk '$6-$2 > 0 {print $1 "\t" $2 "\t" $6 "\t" $7 }' > \
    $FILENAME.filtered.bedpe.fragments.bed \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: calling peaks with Fseq ... "

bedFile=$FILENAME.filtered.bedpe.bed

bedDir=`echo $bedFile | sed 's/\.bed$/\_output/g'`
mkdir $bedDir
mv $bedFile $bedDir
tempDir="$bedDir/TEMP_$bedFile"
mkdir $tempDir

$FSEQ \
    -d $bedDir \
    -o $tempDir \
    -f 0 \
    -l 800 \
    -t 14 \
    -of npf \
    2> $FILENAME.stderr.txt

npfFile="$FILENAME.fseq.narrowPeak"
rm -rf $bedDir/$npfFile

for i in `echo {1..22} X Y`
do
    cat $tempDir/chr$i.npf >> $bedDir/$npfFile
done

mv $bedDir/* ./
rm -rf $tempDir $bedDir TEMP_*

echo "done."


echo -n "`date`: adding \"chr\" to the list of peaks... "
cat $FILENAME.fseq.narrowPeak | \
    sed s/chr//g | \
    awk '{print "chr" $0}' > \
    $FILENAME.fseq.chr.narrowPeak
echo "done."


echo -n "`date`: creating a list of peak widths -- for the histogram of peak width... "
cat $FILENAME.fseq.chr.narrowPeak | \
    awk '{print $3-$2}' > \
    $FILENAME.peaks_width.hist
echo "done."


echo "QUALITY CONTROL 1 -- Called_peaks / Fragments_per_chromosome"

echo -n "`date`: QC1 -- counting number of called peaks per chromosome... "
echo -e "Chromosome\tCalled_peaks" > $FILENAME.temp_peaks_per_chrom
for i in `echo {1..22} X Y`
do
    echo -n -e chr$i"\t" >> $FILENAME.temp_peaks_per_chrom
    cat $FILENAME.fseq.chr.narrowPeak | \
    grep -cP "^chr$i\t" >> \
    $FILENAME.temp_peaks_per_chrom
done
echo "done."

echo -n "`date`: QC1 -- counting number of reads mapped per chromosome... "
echo -e "Chromosome\tFragments_per_chrom" > $FILENAME.temp_fragm_per_chrom
for i in `echo {1..22} X Y`
do
    echo -n -e chr$i"\t" >> \
        $FILENAME.temp_fragm_per_chrom
    cat $FILENAME.filtered.bedpe.fragments.bed | \
        grep -cP "^chr$i\t" >> \
        $FILENAME.temp_fragm_per_chrom
done
echo "done."

echo "QUALITY CONTROL 2 -- Fragments_in_peaks / Fragments_per_chromosome"
echo -n "`date`: QC2 -- overlapping fragments with the peak file... "
$BEDTOOLS intersect \
    -f 0.10 \
    -wa \
    -a $FILENAME.filtered.bedpe.fragments.bed \
    -b $FILENAME.fseq.chr.narrowPeak | \
    uniq > \
    $FILENAME.filtered.bedpe.fragments_to_peaks.bed \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: QC2 -- counting number of fragments in peaks per chromosome... "
echo -e "Chromosome\tFragments_in_peaks" > $FILENAME.temp_fragm_per_peaks
for i in `echo {1..22} X Y`
do
    echo -n -e chr$i"\t" >> \
        $FILENAME.temp_fragm_per_peaks
    cat $FILENAME.filtered.bedpe.fragments_to_peaks.bed | \
        grep -cP "^chr$i\t" >> \
        $FILENAME.temp_fragm_per_peaks
done
echo "done."

echo "QUALITY CONTROL 4 -- Fragments_in_peaks / Fragments_off_peaks_same_size"

echo -n "`date`: Generating off peak genome-wide file... "
cat $FILENAME.chrom_sizes.txt | \
    awk '{print $1 "\t1\t" $2}' > \
    $FILENAME.temp_chrom

$BEDTOOLS subtract \
    -a $FILENAME.temp_chrom \
    -b $FILENAME.fseq.chr.narrowPeak > \
    $FILENAME.no_peak.bed \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: Generating regions outside peaks of peak length... "
echo > $FILENAME.off_peaks.peak_size.bed
for i in `echo {1..22} X Y`
do
    cat $FILENAME.fseq.chr.narrowPeak | \
        grep -P "^chr$i\t" > \
        peaks.$i.bed
    cat $FILENAME.no_peak.bed | \
        grep -P "^chr$i\t" > \
        no_peaks.$i.bed
    $EXTRACT_FRAGMENTS \
        peaks.$i.bed \
        no_peaks.$i.bed >> \
        $FILENAME.off_peaks.peak_size.bed
    rm peaks.$i.bed no_peaks.$i.bed
done
echo "done."

echo -n "`date`: Getting reads mapped to regions outside peaks of peak length... "
$BEDTOOLS intersect \
    -f 0.10 \
    -wa \
    -a $FILENAME.filtered.bedpe.fragments.bed \
    -b $FILENAME.off_peaks.peak_size.bed | \
    uniq > \
    $FILENAME.fragments_to_peaks.peak_length.bed \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: Counting the fragments mapped off peaks... "
echo -e "Chromosome\tFragments_per_off_peaks_peak_length" > \
    $FILENAME.temp_fragm_per_off_peaks_peak_length
for i in `echo {1..22} X Y`
do
    echo -n -e chr$i"\t" >> \
        $FILENAME.temp_fragm_per_off_peaks_peak_length
    cat $FILENAME.fragments_to_peaks.peak_length.bed | \
        grep -cP "^chr$i\t" >> \
        $FILENAME.temp_fragm_per_off_peaks_peak_length
done
echo "done."

echo -n "`date`: gathering all intermediate files into $FILENAME.stat.txt... "
paste \
    <(awk '{print $0}' $FILENAME.temp_peaks_per_chrom) \
    <(awk '{print $2}' $FILENAME.temp_fragm_per_peaks) \
    <(awk '{print $2}' $FILENAME.temp_fragm_per_chrom) \
    <(awk '{print $2}' $FILENAME.temp_fragm_per_off_peaks_peak_length) > \
    $FILENAME.stat.txt
rm $FILENAME.temp*
echo "done."

echo -n "`date`: generating insertSizeMetric report on filtered data..."
$PICARD CollectInsertSizeMetrics.jar \
    VALIDATION_STRINGENCY=LENIENT \
    ASSUME_SORTED=true \
    HISTOGRAM_FILE=$FILENAME.filtered.picard_histogram \
    INPUT=$FILENAME.bam \
    OUTPUT=$FILENAME.filtered.picard_insertSizeMetric_report \
    2> $FILENAME.stderr.txt
echo "done."

echo -n "`date`: parsing picard output... "
cat $FILENAME.filtered.picard_insertSizeMetric_report | \
    grep -v -P '.*\t.*\t.*\t' | \
    grep -P '^\d|^insert' > \
    $FILENAME.filtered.insertSize_hist
echo "done."

echo -n "`date`: creating plots with quality metrics... "
Rscript $ATAC_QC \
    $FILENAME.peaks_width.hist \
    $FILENAME.stat.txt \
    $FILENAME.filtered.insertSize_hist \
    $FILENAME.QC.pdf \
    2> $FILENAME.stderr.txt
echo "done."

rm Rplots.pdf

# ======================================================================
# =                                                                    =
# =                      GENERATING QC REPORT                          =
# =                                                                    =
# ======================================================================

echo -n "`date`: counting number of reads mapped after filtering... "
echo -n -e "number_mapped_reads_after_filt\t" > $FILENAME.report.txt
$SAMTOOLS view \
    -F 4 \
    $FILENAME.bam | \
    wc -l >> \
    $FILENAME.report.txt
echo "done."

MAPPED_READS=`$SAMTOOLS view -F 4 $FILENAME.bam | wc -l`

echo -n "`date`: calculating average fragment width... "
echo -n -e "average_fragm_width\t" >> $FILENAME.report.txt
NUM_FRAGMS=`cat $FILENAME.peaks_width.hist | wc -l`
cat $FILENAME.peaks_width.hist | \
    awk -v var="$NUM_FRAGMS" '{sum += $1} END {print sum/var}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: Counting total number of called peaks... "
echo -n -e "total_called_peaks\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk '{sum += $2} END {print sum}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: average peaks per chromosome... "
echo -n -e "average_peaks_per_chrom\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk '{sum += $2} END {print sum/23}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: counting number of peaks normalized by the total number of mapped reads... "
echo -n -e "peaks_norm_mapped_reads\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk -v var="$MAPPED_READS" '{sum += $2} END {print 1000000*(sum/(var*23))}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: counting number of peaks normalized by the number of reads mapped per chromosome... "
echo -n -e "peaks_norm_mapped_reads_per_chrom\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk '{sum += $2/$4} END {print 1000000*(sum/23)}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: counting number of reads in peaks normalized by the total number of mapped reads... "
echo -n -e "reads_in_peaks_norm_mapped_reads\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk -v var="$MAPPED_READS" '{sum += $3} END {print 1000000*(sum/(var*23))}' >> \
    $FILENAME.report.txt
echo "done."

## Calculating signal-to-noise ratio -- number of
## reads in peaks divided by number of reads mapped
## outside peaks to the regions of equal length.

echo -n "`date`: calculating signal-to-noise ratio... "
echo -n -e "signal_to_noise\t" >> $FILENAME.report.txt
cat $FILENAME.stat.txt | \
    grep -v 'chrY\|Called' | \
    awk '{print $3/$5}' | \
    awk '{sum += $1} END {print sum/23}' >> \
    $FILENAME.report.txt
echo "done."

echo -n "`date`: calculating average peak width... "
echo -n -e "average_peak_width\t" >> $FILENAME.report.txt
NUM_PEAKS=`cat $FILENAME.fseq.chr.narrowPeak | wc -l`
cat $FILENAME.fseq.chr.narrowPeak | \
    awk -v var="$NUM_PEAKS" '{sum += $NF} END {print sum/var}' >> \
    $FILENAME.report.txt
echo "done."

# deleting intermediate files which won't be used anymore
rm -rf *.picard_insertSizeMetric_report
rm -rf *.picard_histogram
rm -rf *.bedgraph
rm -rf *.filtered.name_sort.bam
rm -rf $FILENAME.nodup.MAPQ30.bam
rm -rf $FILENAME.nodup.MAPQ30.uniq.bam
rm -rf $FILENAME.nodup.MAPQ30.uniq.proper_paired.bam
rm -rf $FILENAME.nodup.bam
rm -rf $FILENAME.sam
rm -rf $FILENAME.bam1
rm -rf $FILENAME.sorted.bam
rm -rf $FILENAME.unfiltered.bam
rm -rf $FILENAME.fragments_to_peaks.peak_length.bed
rm -rf $FILENAME.no_peak.bed
rm -rf $FILENAME.off_peaks.peak_size.bed
rm -rf $FILENAME.sorted.bed
rm -rf $FILENAME.fseq.narrowPeak
rm -rf $FILENAME.chrom_sizes.txt
echo "END : `date`"

